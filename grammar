// Prototype grammar for Starling
// only defines functions and basic statements and expressions

program = declaration*
declaration = function | variable_declr
function = FUNC function_signature block
function_signature = IDENTIFIER LEFT_BRACKET field_list? RIGHT_BRACKET type?
struct = STRUCT IDENTIFIER struct_block
struct_block = LEFT_CURLY field_list RIGHT_CURLY
interface = INTERFACE IDENTIFIER interface_block
interface_block = LEFT_CURLY function_signature (COMMA function_signature)* RIGHT_CURLY
implement_declr = IMPL IDENTIFIER LESS_THAN IDENTIFIER GREATER_THAN implement_block
implement_block = LEFT_CURLY function* RIGHT_CURLY
variable_declr = VAR IDENTIFIER type? EQUALS expression SEMICOLON
field_declr = IDENTIFIER type?
field_list = field_declr SEMICOLON (field_declr SEMICOLON)* 

type = INTEGER_TYPE | FLOAT_TYPE | RATIONAL_TYPE | STRING_TYPE | BOOL_TYPE | array_type | vector_type
array_type = ARR (LESS_THAN type (LEFT_SQUARE expression RIGHT_SQUARE)? GREATER_THAN)?
vector_type = VEC (LESS_THAN type GREATER_THAN)?

block = LEFT_CURLY statement* RIGHT_CURLY
statement = declaration
	  | if
	  | while
	  | return
	  | assignment
	  | expression SEMICOLON
if = IF expression (statement | block) (ELSE ( statement | block ))?
while = WHILE expression block
return = RETURN expression SEMICOLON
assignment = expression EQUALS expression SEMICOLON

expression = binary_expr
binary_expr = unary_expr (BINARY_OP unary_expr)*
unary_expr = UNARY_OP* primary_expr
primary_expr = primary
	     | primary_expr selector
	     | primary_expr index
	     | primary_expr call_arguments
primary =  INTEGER | FLOAT | RATIONAL | STRING | BOOL | IDENTIFIER | group_expr | range_expr | sequence_expr | array_expr | vector_expr
group_expr = LEFT_BRACKET expression RIGHT_BRACKET
range_expr = LEFT_SQUARE expression COLON expression RIGHT_SQUARE
sequence_expr = LEFT_SQUARE (expression (COMMA expression)*)? RIGHT_SQUARE
array_expr = ARR sequence_expr
vector_expr = VEC sequence_expr
selector = DOT IDENTIFIER
index = LEFT_SQUARE expression RIGHT_SQUARE
call_arguments = LEFT_BRACKET (expression (COMMA expression)*)* RIGHT_BRACKET


// tokens
INTEGER = [0-9]+
FLOAT = INTEGER "." INTEGER
RATIONAL = INTEGER "//" INTEGER
STRING = "\"" [^\"]* "\""
BOOL = "true" | "false"
IDENTIFIER = [a-zA-z_] [a-zA-Z0-9_]*
INTEGER_TYPE = "int"
FLOAT_TYPE = "float"
RATIONAL_TYPE = "frac"
STRING_TYPE = "str"
BOOL_TYPE = "bool"

BINARY_OP = EQUALS_EQUALS | BANG_EQUALS
          | LESS_THAN | GREATER_THAN | LESS_EQUALS | GREATER_EQUALS
          | STAR | SLASH | PLUS | MINUS
UNARY_OP = BANG | MINUS
EQUALS_EQUALS = "=="
BANG_EQUALS = "!="
LESS_THAN = "<"
GREATER_THAN = ">"
LESS_EQUALS = "<="
GREATER_EQUALS = ">="
EQUALS = "="
STAR = "*"
SLASH = "/"
PLUS = "+"
MINUS = "-"
BANG = "!"

SEMICOLON = ";"
COLON = ":"
COMMA = ","
DOT = "."
LEFT_BRACKET = "("
RIGHT_BRACKET = ")"
LEFT_CURLY = "{"
RIGHT_CURLY = "}"
LEFT_SQUARE = "["
RIGHT_SQUARE = "]"
IF = "if"
ELSE = "else"
WHILE = "while"
RETURN = "return"
VAR = "var"
FUNC = "fn"
STRUCT = "struct"
INTERFACE = "interface"
IMPL = "impl"
ARR = "arr"
VEC = "vec"
